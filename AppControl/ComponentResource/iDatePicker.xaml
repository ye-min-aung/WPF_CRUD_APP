<ResourceDictionary
    xmlns="http://schemas.microsoft.com/winfx/2006/xaml/presentation"
    xmlns:x="http://schemas.microsoft.com/winfx/2006/xaml"
    xmlns:local="clr-namespace:CGMWPF.Front.AppControls"
    xmlns:wpf="clr-namespace:MaterialDesignThemes.Wpf;assembly=MaterialDesignThemes.Wpf"
    xmlns:converters="clr-namespace:MaterialDesignThemes.Wpf.Converters;assembly=MaterialDesignThemes.Wpf"
    >

    <ResourceDictionary.MergedDictionaries>
        <ResourceDictionary Source="pack://application:,,,/MaterialDesignThemes.Wpf;component/Themes/MaterialDesignTheme.Calendar.xaml" />
        <ResourceDictionary Source="pack://application:,,,/MaterialDesignThemes.Wpf;component/Themes/MaterialDesignTheme.ValidationErrorTemplate.xaml" />
        <ResourceDictionary Source="pack://application:,,,/MaterialDesignThemes.Wpf;component/Themes/MaterialDesignTheme.Menu.xaml" />
    </ResourceDictionary.MergedDictionaries>

    <converters:TextFieldHintVisibilityConverter x:Key="TextFieldHintVisibilityConverter" />
    <converters:BooleanToVisibilityConverter x:Key="BooleanToVisibilityConverter" />
    <converters:MathConverter Operation="Divide" x:Key="DivisionMathConverter" />
    <converters:NotConverter x:Key="NotConverter" />
    <converters:MathConverter x:Key="MathMultiplyConverter" Operation="Multiply" />
    <converters:PickerInnerPaddingConverter x:Key="PickerInnerPaddingConverter" />

    <!-- 日付テキストボックス -->
    <Style x:Key="iDatePickerTextBox" TargetType="{x:Type DatePickerTextBox}">
        <Setter Property="Foreground" Value="#18181B" />
        <Setter Property="BorderBrush" Value="#525252" />
        <Setter Property="BorderThickness" Value="1,1,1,1"/>
        <!--<Setter Property="wpf:TextFieldAssist.TextBoxViewMargin" Value="{x:Static wpf:Constants.DefaultTextBoxViewMargin}" />-->
        <Setter Property="Background" Value="#FFFFFFFF"/>
        <Setter Property="CaretBrush" Value="#15803D" />
        <Setter Property="wpf:TextFieldAssist.UnderlineBrush" Value="#15803D" />
        <Setter Property="HorizontalContentAlignment" Value="Stretch"/>
        <Setter Property="VerticalContentAlignment" Value="Center"/>
        <Setter Property="FocusVisualStyle" Value="{x:Null}"/>
        <Setter Property="Padding" Value="0,0,0,0"/>
        <Setter Property="AllowDrop" Value="true"/>
        <Setter Property="Cursor" Value="IBeam"/>
        <Setter Property="KeyboardNavigation.TabNavigation" Value="Local"/>
        <Setter Property="Template">
            <Setter.Value>
                <ControlTemplate TargetType="{x:Type DatePickerTextBox}">

                    <Grid>
                        <Grid.Resources>
                            <SolidColorBrush x:Key="WatermarkBrush" Color="{TemplateBinding Foreground}" />
                        </Grid.Resources>
                        <Border
                            HorizontalAlignment="Stretch"
                            VerticalAlignment="Stretch"
                            Background="{DynamicResource MaterialDesignTextFieldBoxHoverBackground}"
                            CornerRadius="4,4,4,4"
                            Visibility="{TemplateBinding wpf:TextFieldAssist.RippleOnFocusEnabled, Converter={StaticResource BooleanToVisibilityConverter}}"
                            RenderTransformOrigin="0.5,0.5">
                            <Border.RenderTransform>
                                <ScaleTransform x:Name="RippleOnFocusScaleTransform" ScaleX="0" ScaleY="0" />
                            </Border.RenderTransform>
                        </Border>

                        
                        <AdornerDecorator>

                            <Border
                                x:Name="border"
                                Padding="{TemplateBinding Padding}"
                                BorderBrush="{TemplateBinding BorderBrush}"
                                BorderThickness="{TemplateBinding BorderThickness}"
                                Background="{TemplateBinding Background}"
                                CornerRadius="4,4,4,4"
                                SnapsToDevicePixels="True"
                                wpf:BottomDashedLineAdorner.Brush="{TemplateBinding BorderBrush}"
                                wpf:BottomDashedLineAdorner.Thickness="{TemplateBinding BorderThickness}">

                                <ScrollViewer
                                            x:Name="PART_ContentHost"
                                            Panel.ZIndex="1"
                                            Focusable="false"
                                            HorizontalScrollBarVisibility="Hidden"
                                            VerticalScrollBarVisibility="Hidden"
                                            SnapsToDevicePixels="{TemplateBinding SnapsToDevicePixels}"
                                            UseLayoutRounding="{TemplateBinding UseLayoutRounding}"
                                            Margin="8,2,0,2"
                                            wpf:ScrollViewerAssist.IgnorePadding="True" />

                            </Border>

                        </AdornerDecorator>
                        <VisualStateManager.VisualStateGroups>
                            <VisualStateGroup x:Name="FocusStates">
                                <VisualState x:Name="Focused">
                                    <Storyboard TargetName="RippleOnFocusScaleTransform">
                                        <DoubleAnimation
                                            Storyboard.TargetProperty="ScaleX"
                                            From="0"
                                            To="1"
                                            Duration="0:0:0.3">
                                            <DoubleAnimation.EasingFunction>
                                                <SineEase EasingMode="EaseOut" />
                                            </DoubleAnimation.EasingFunction>
                                        </DoubleAnimation>
                                        <DoubleAnimation
                                            Storyboard.TargetProperty="ScaleY"
                                            From="0"
                                            To="1"
                                            Duration="0:0:0.3">
                                            <DoubleAnimation.EasingFunction>
                                                <SineEase EasingMode="EaseOut" />
                                            </DoubleAnimation.EasingFunction>
                                        </DoubleAnimation>
                                        <DoubleAnimation
                                            BeginTime="0:0:0.45"
                                            Storyboard.TargetProperty="ScaleX"
                                            To="0"
                                            Duration="0" />
                                        <DoubleAnimation
                                            BeginTime="0:0:0.45"
                                            Storyboard.TargetProperty="ScaleY"
                                            To="0"
                                            Duration="0" />
                                    </Storyboard>
                                </VisualState>
                                <VisualState x:Name="Unfocused">
                                    <Storyboard TargetName="RippleOnFocusScaleTransform">
                                        <DoubleAnimation
                                            Storyboard.TargetProperty="ScaleX"
                                            To="0"
                                            Duration="0" />
                                        <DoubleAnimation
                                            Storyboard.TargetProperty="ScaleY"
                                            To="0"
                                            Duration="0" />
                                    </Storyboard>
                                </VisualState>
                            </VisualStateGroup>
                        </VisualStateManager.VisualStateGroups>

                    </Grid>

                    <ControlTemplate.Triggers>

                        <!--  IsEnabled  -->
                        <MultiTrigger>
                            <MultiTrigger.Conditions>
                                <Condition Property="IsEnabled" Value="False" />
                            </MultiTrigger.Conditions>
                            <Setter Property="Background" Value="#FFD6D6D6"/>
                        </MultiTrigger>
                        

                        <!-- IsKeyboardFocused -->
                        <MultiTrigger>
                            <MultiTrigger.Conditions>
                                <Condition Property="IsKeyboardFocused" Value="True" />
                            </MultiTrigger.Conditions>
                            <Setter TargetName="border" Property="Margin" Value="-1" />
                            <Setter TargetName="border" Property="BorderBrush" Value="#15803D" />
                            <Setter Property="BorderThickness" Value="2" />
                        </MultiTrigger>

                        <!-- IsMouseOver -->
                        <MultiTrigger>
                            <MultiTrigger.Conditions>
                                <Condition Property="IsMouseOver" Value="True" />
                            </MultiTrigger.Conditions>
                            <Setter TargetName="border" Property="Margin" Value="-1" />
                            <Setter Property="BorderThickness" Value="2" />
                            <Setter TargetName="border" Property="BorderBrush" Value="#15803D" />
                        </MultiTrigger>
                        

                        <!-- Validation.HasError -->
                        <Trigger Property="Validation.HasError" Value="true">
                            <Setter TargetName="border" Property="Margin" Value="-1" />
                            <Setter Property="BorderThickness" Value="2" />
                            <Setter Property="BorderBrush" Value="#991B1B" />
                        </Trigger>

                    </ControlTemplate.Triggers>

                </ControlTemplate>
            </Setter.Value>
        </Setter>
    </Style>

    <!-- カレンダー -->
    <!--<Style x:Key="iDatePickerCalendarPortrait" TargetType="{x:Type Calendar}" BasedOn="{StaticResource MaterialDesignCalendarPortrait}">
        <Setter Property="Margin" Value="16 8 16 24"/>
        <Setter Property="Foreground" Value="Black"></Setter>
        <Setter Property="BorderBrush" Value="Blue"></Setter>
        <Setter Property=""
    </Style>-->

    <!-- iDatePicker本体 -->
    <Style TargetType="{x:Type local:iDatePicker}">

        <Setter Property="Background" Value="#FFFFFFFF" />
        <Setter Property="Foreground" Value="#18181B" />
        <Setter Property="BorderBrush" Value="#525252" />
        <Setter Property="BorderThickness" Value="0,0,0,0" />
        <!--<Setter Property="CalendarStyle" Value="{StaticResource iDatePickerCalendarPortrait}" />-->
        <!--<Setter Property="wpf:TextFieldAssist.TextBoxViewMargin" Value="{x:Static wpf:Constants.DefaultTextBoxViewMargin}" />-->
        <!--<Setter Property="Validation.ErrorTemplate" Value="{StaticResource MaterialDesignValidationErrorTemplate}" />
        <Setter Property="wpf:TextFieldAssist.UnderlineBrush" Value="{DynamicResource PrimaryHueMidBrush}" />
        <Setter Property="wpf:HintAssist.Foreground" Value="{DynamicResource PrimaryHueMidBrush}" />-->
        <Setter Property="HorizontalContentAlignment" Value="Stretch" />
        <Setter Property="VerticalAlignment" Value="Center" />
        <Setter Property="Padding" Value="0,0,0,0" />
        <Setter Property="IsTodayHighlighted" Value="True" />
        <Setter Property="SelectedDateFormat" Value="Short" />
        <Setter Property="Template">
            <Setter.Value>
                <ControlTemplate TargetType="{x:Type local:iDatePicker}">
                    <ControlTemplate.Resources>
                        <ControlTemplate x:Key="CalendarButtonTemplate" TargetType="{x:Type Button}">
                            <wpf:PackIcon
                                Kind="Calendar"
                                Foreground="{TemplateBinding Foreground}"
                                Background="{TemplateBinding Background}"
                                VerticalAlignment="Center" />
                        </ControlTemplate>
                    </ControlTemplate.Resources>

                    <AdornerDecorator>

                        <Border
                            x:Name="border"
                            Padding="{TemplateBinding Padding}"
                            Background="{TemplateBinding Background}"
                            BorderBrush="{TemplateBinding BorderBrush}"
                            BorderThickness="{TemplateBinding BorderThickness}"
                            CornerRadius="4,4,4,4"
                            SnapsToDevicePixels="True">

                            <Grid x:Name="PART_Root">
                                
                                <DatePickerTextBox
                                    x:Name="PART_TextBox"
                                    Grid.Column="0"
                                    Grid.Row="0"
                                    Background="{TemplateBinding Background}"
                                    Focusable="{TemplateBinding Focusable}"
                                    Style="{StaticResource iDatePickerTextBox}"
                                    VerticalContentAlignment="Center"
                                    HorizontalAlignment="Stretch"
                                    HorizontalContentAlignment="{TemplateBinding HorizontalContentAlignment}"
                                    BorderBrush="{TemplateBinding BorderBrush}"
                                    >
                                    <!--wpf:HintAssist.IsFloating="{TemplateBinding wpf:HintAssist.IsFloating}"
                                    wpf:HintAssist.FloatingScale="{TemplateBinding wpf:HintAssist.FloatingScale}"
                                    wpf:HintAssist.FloatingOffset="{TemplateBinding wpf:HintAssist.FloatingOffset}"
                                    wpf:HintAssist.Hint="{TemplateBinding wpf:HintAssist.Hint}"
                                    wpf:HintAssist.HintOpacity="{TemplateBinding wpf:HintAssist.HintOpacity}"
                                    wpf:HintAssist.Foreground="{TemplateBinding wpf:HintAssist.Foreground}"
                                    wpf:HintAssist.HelperText="{TemplateBinding wpf:HintAssist.HelperText}"
                                    wpf:HintAssist.HelperTextFontSize="{TemplateBinding wpf:HintAssist.HelperTextFontSize}"
                                    wpf:TextFieldAssist.TextBoxViewMargin="{TemplateBinding wpf:TextFieldAssist.TextBoxViewMargin}"
                                    wpf:TextFieldAssist.DecorationVisibility="{TemplateBinding wpf:TextFieldAssist.DecorationVisibility}"
                                    wpf:TextFieldAssist.HasFilledTextField="{TemplateBinding wpf:TextFieldAssist.HasFilledTextField}"
                                    wpf:TextFieldAssist.HasOutlinedTextField="{TemplateBinding wpf:TextFieldAssist.HasOutlinedTextField}"
                                    wpf:TextFieldAssist.TextFieldCornerRadius="{TemplateBinding wpf:TextFieldAssist.TextFieldCornerRadius}"
                                    wpf:TextFieldAssist.UnderlineCornerRadius="{TemplateBinding wpf:TextFieldAssist.UnderlineCornerRadius}"
                                    wpf:TextFieldAssist.NewSpecHighlightingEnabled="{TemplateBinding wpf:TextFieldAssist.NewSpecHighlightingEnabled}"
                                    wpf:TextFieldAssist.RippleOnFocusEnabled="{TemplateBinding wpf:TextFieldAssist.RippleOnFocusEnabled}"
                                    wpf:TextFieldAssist.UnderlineBrush="{TemplateBinding wpf:TextFieldAssist.UnderlineBrush}"
                                    wpf:TextFieldAssist.HasClearButton="{TemplateBinding wpf:TextFieldAssist.HasClearButton}"
                                    wpf:TextFieldAssist.PrefixText="{TemplateBinding wpf:TextFieldAssist.PrefixText}"
                                    wpf:TextFieldAssist.SuffixText="{TemplateBinding wpf:TextFieldAssist.SuffixText}">-->
                                    <DatePickerTextBox.Padding>
                                        <MultiBinding Converter="{StaticResource PickerInnerPaddingConverter}">
                                            <!--<Binding Path="Padding" RelativeSource="{RelativeSource TemplatedParent}" />-->
                                            <Binding Path="ActualWidth" ElementName="PART_Button" Mode="OneWay" />
                                        </MultiBinding>
                                    </DatePickerTextBox.Padding>
                                </DatePickerTextBox>
                                <Button
                                    x:Name="PART_Button"
                                    Foreground="#2C3E50 "
                                    Background="Transparent"
                                    Focusable="False"
                                    HorizontalAlignment="Right"
                                    VerticalAlignment="Center"
                                    Template="{StaticResource CalendarButtonTemplate}"
                                    Margin="0,2,4,2"
                                    Height="16" />
                                <Popup
                                    x:Name="PART_Popup"
                                    AllowsTransparency="True"
                                    Placement="Custom"
                                    CustomPopupPlacementCallback="{x:Static wpf:CustomPopupPlacementCallbackHelper.LargePopupCallback}"
                                    PlacementTarget="{Binding ElementName=PART_TextBox}"
                                    StaysOpen="False"
                                    PopupAnimation="Fade" />
                            </Grid>

                        </Border>

                    </AdornerDecorator>

                    <ControlTemplate.Triggers>

                        <!--  IsEnabled  -->
                        <MultiTrigger>
                            <MultiTrigger.Conditions>
                                <Condition Property="IsEnabled" Value="False" />
                            </MultiTrigger.Conditions>
                            <Setter Property="Background" Value="#FFD6D6D6"/>
                        </MultiTrigger>


                        <!--IsReadOnly-->  
                        <!--<MultiTrigger>
                            <MultiTrigger.Conditions>
                                <Condition Property="IsReadOnly" Value="True" />
                            </MultiTrigger.Conditions>
                            <Setter TargetName="border" Property="BorderBrush" Value="#FF666666" />
                            <Setter Property="Background" Value="#FFD6D6D6"/>
                        </MultiTrigger>-->


                        <!--  IsKeyboardFocused  -->
                        <!--<Trigger Property="IsKeyboardFocused" Value="True">
                        </Trigger>
                        <MultiTrigger>
                            <MultiTrigger.Conditions>
                                <Condition Property="IsKeyboardFocused" Value="True" />
                            </MultiTrigger.Conditions>
                            <Setter TargetName="border" Property="Margin" Value="-1" />
                            --><!--<Setter Property="BorderThickness" Value="2" />--><!--
                            <Setter Property="BorderBrush" Value="{Binding Path=(wpf:TextFieldAssist.UnderlineBrush), RelativeSource={RelativeSource Self}}" />
                        </MultiTrigger>-->

                        <!--  IsMouseOver  -->
                        <!--<MultiTrigger>
                            <MultiTrigger.Conditions>
                                <Condition Property="IsMouseOver" Value="True" />
                                <Condition Property="wpf:TextFieldAssist.NewSpecHighlightingEnabled" Value="False" />
                            </MultiTrigger.Conditions>
                            <Setter Property="BorderBrush" Value="{Binding Path=(wpf:TextFieldAssist.UnderlineBrush), RelativeSource={RelativeSource Self}}" />
                            <Setter TargetName="border" Property="Margin" Value="-1" />
                            --><!--<Setter Property="BorderThickness" Value="2" />--><!--
                        </MultiTrigger>-->


                        <!--  Validation.HasError  -->
                        <Trigger Property="Validation.HasError" Value="true">
                            <Setter TargetName="border" Property="Margin" Value="-1" />
                            <Setter Property="BorderBrush" Value="#991B1B" />
                            <Setter Property="BorderThickness" Value="2" />
                        </Trigger>

                    </ControlTemplate.Triggers>

                </ControlTemplate>
            </Setter.Value>
        </Setter>

    </Style>




</ResourceDictionary>