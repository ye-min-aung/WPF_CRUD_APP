<ResourceDictionary
    xmlns="http://schemas.microsoft.com/winfx/2006/xaml/presentation"
    xmlns:x="http://schemas.microsoft.com/winfx/2006/xaml"
    xmlns:local="clr-namespace:CGMWPF.Front.AppControls"
    xmlns:wpf="clr-namespace:MaterialDesignThemes.Wpf;assembly=MaterialDesignThemes.Wpf"
    xmlns:converters="clr-namespace:MaterialDesignThemes.Wpf.Converters;assembly=MaterialDesignThemes.Wpf"
    xmlns:system="http://schemas.microsoft.com/winfx/2009/xaml"
    >

    <ResourceDictionary.MergedDictionaries>
        <ResourceDictionary Source="pack://application:,,,/MaterialDesignThemes.Wpf;component/Themes/MaterialDesignTheme.Shadows.xaml" />
        <ResourceDictionary Source="pack://application:,,,/MaterialDesignThemes.Wpf;component/Themes/MaterialDesignTheme.ValidationErrorTemplate.xaml" />
        <ResourceDictionary Source="pack://application:,,,/MaterialDesignThemes.Wpf;component/Themes/MaterialDesignTheme.Menu.xaml" />
        
        <ResourceDictionary Source="pack://application:,,,/MaterialDesignThemes.Wpf;component/Themes/MaterialDesignTheme.Light.xaml" />
        <ResourceDictionary Source="pack://application:,,,/MaterialDesignThemes.Wpf;component/Themes/MaterialDesignTheme.Defaults.xaml" />
        <ResourceDictionary Source="pack://application:,,,/MaterialDesignColors;component/Themes/Recommended/Primary/MaterialDesignColor.Teal.xaml" />
        <ResourceDictionary Source="pack://application:,,,/MaterialDesignColors;component/Themes/Recommended/Accent/MaterialDesignColor.Teal.xaml" />
    </ResourceDictionary.MergedDictionaries>

    <!--<converters:TextFieldHintVisibilityConverter x:Key="TextFieldHintVisibilityConverter" IsNotEmptyValue="Collapsed" />
    <converters:MathConverter x:Key="MathAddConverter" Operation="Add" />
    <converters:MathConverter x:Key="DivisionMathConverter" Operation="Divide" />
    <converters:MathConverter x:Key="MathMultiplyConverter" Operation="Multiply" />
    <converters:BrushRoundConverter x:Key="BrushRoundConverter" />
    <converters:BooleanToVisibilityConverter x:Key="InverseBoolToVisConverter" TrueValue="Collapsed" FalseValue="Visible"/>
    <converters:NotConverter x:Key="NotConverter" />-->

    <!--<system:Double x:Key="PopupContentPresenterExtend">4</system:Double>
    <system:Double x:Key="PopupTopBottomMargin">8</system:Double>
    <system:Double x:Key="PopupLeftRightMargin">16</system:Double>-->
    <!--<system:Boolean x:Key="TrueValue">True</system:Boolean>
    <system:Boolean x:Key="FalseValue">False</system:Boolean>
    <system:String x:Key="AllowCollapse">AllowCollapse</system:String>-->

    <Style x:Key="MaterialDesignComboBox" TargetType="{x:Type local:iComboBox}">
        <Setter Property="wpf:ComboBoxAssist.ShowSelectedItem" Value="True"/>
        <Setter Property="Background" Value="Transparent"/>
        <Setter Property="BorderBrush" Value="#000"/>
        <Setter Property="BorderThickness" Value="1"/>
        <Setter Property="FocusVisualStyle" Value="{x:Null}"/>
        <Setter Property="Foreground" Value="{Binding RelativeSource={RelativeSource AncestorType={x:Type FrameworkElement}}, Path=(TextElement.Foreground)}"/>
        <Setter Property="ItemContainerStyle" Value="{StaticResource MaterialDesignComboBoxItemStyle}" />
        <Setter Property="ScrollViewer.HorizontalScrollBarVisibility" Value="Auto" />
        <Setter Property="ScrollViewer.VerticalScrollBarVisibility" Value="Auto" />
        <Setter Property="Padding" Value="{x:Static wpf:Constants.TextBoxDefaultPadding}" />
        <Setter Property="HorizontalContentAlignment" Value="Stretch"/>
        <Setter Property="HorizontalAlignment" Value="Stretch"/>
        <Setter Property="VerticalContentAlignment" Value="Top" />
        <Setter Property="VerticalAlignment" Value="Center"/>
        <Setter Property="ScrollViewer.CanContentScroll" Value="True" />
        <Setter Property="ScrollViewer.PanningMode" Value="Both" />
        <Setter Property="Stylus.IsFlicksEnabled" Value="False" />
        <Setter Property="Validation.ErrorTemplate" Value="{StaticResource MaterialDesignValidationErrorTemplate}"/>
        <Setter Property="wpf:TextFieldAssist.TextBoxViewMargin" Value="{x:Static wpf:Constants.DefaultTextBoxViewMarginEmbedded}" />
        <Setter Property="wpf:TextFieldAssist.UnderlineBrush" Value="{DynamicResource PrimaryHueMidBrush}" />
        <Setter Property="wpf:ColorZoneAssist.Mode" Value="Standard" />
        <Setter Property="wpf:HintAssist.Foreground" Value="{DynamicResource PrimaryHueMidBrush}" />
        <Setter Property="Template" Value="{StaticResource MaterialDesignFloatingHintComboBoxTemplate}" />

        <!--Virtualization-->
        <Setter Property="ItemsPanel">
            <Setter.Value>
                <ItemsPanelTemplate>
                    <VirtualizingStackPanel />
                </ItemsPanelTemplate>
            </Setter.Value>
        </Setter>
        <Style.Triggers>
            <Trigger Property="IsEditable" Value="False">
                <Setter Property="IsTabStop" Value="False" />
                <Setter Property="ContextMenu" Value="{StaticResource MaterialDesignDefaultContextMenu}" />
                <!-- designer prefers hard bool -->
                <Setter Property="wpf:ComboBoxAssist.ShowSelectedItem" Value="{StaticResource TrueValue}" />
            </Trigger>
            <!-- designer prefers hard bool -->
            <Trigger Property="wpf:ComboBoxAssist.ShowSelectedItem" Value="{StaticResource FalseValue}" >
                <Setter Property="ItemContainerStyle" Value="{StaticResource MaterialDesignComboBoxItemSelectedCollapsedStyle}" />
            </Trigger>
        </Style.Triggers>
    </Style>

    
    <!--<Style TargetType="{x:Type local:iComboBox}">
        <Setter Property="Foreground" Value="{Binding RelativeSource={RelativeSource AncestorType={x:Type FrameworkElement}}, Path=(TextElement.Foreground)}" />
        <Setter Property="BorderBrush" Value="{DynamicResource MaterialDesignTextBoxBorder}" />
        <Setter Property="BorderThickness" Value="1,1,1,1" />
        <Setter Property="wpf:TextFieldAssist.TextBoxViewMargin" Value="{x:Static wpf:Constants.DefaultTextBoxViewMargin}" />
        <Setter Property="Background" Value="#FFFFFFFF" />
        --><!--<Setter Property="CaretBrush" Value="{DynamicResource PrimaryHueMidBrush}" />-->
        <!--<Setter Property="SelectionBrush" Value="{DynamicResource PrimaryHueLightBrush}" />--><!--
        <Setter Property="HorizontalContentAlignment" Value="Stretch" />
        <Setter Property="VerticalContentAlignment" Value="Center" />
        <Setter Property="FocusVisualStyle" Value="{x:Null}" />
        <Setter Property="AllowDrop" Value="true" />
        <Setter Property="Cursor" Value="Arrow" />
        <Setter Property="Padding" Value="8,4,8,4" />
        <Setter Property="ScrollViewer.PanningMode" Value="VerticalFirst" />
        <Setter Property="Stylus.IsFlicksEnabled" Value="False" />
        <Setter Property="Validation.ErrorTemplate" Value="{StaticResource MaterialDesignValidationErrorTemplate}" />
        <Setter Property="wpf:TextFieldAssist.UnderlineBrush" Value="{DynamicResource PrimaryHueMidBrush}" />
        <Setter Property="wpf:HintAssist.Foreground" Value="{DynamicResource PrimaryHueMidBrush}" />
        <Setter Property="ContextMenu" Value="{StaticResource MaterialDesignDefaultContextMenu}" />
        <Setter Property="KeyboardNavigation.TabNavigation" Value="Local" />
        <Setter Property="wpf:TextFieldAssist.IncludeSpellingSuggestions" Value="{Binding RelativeSource={RelativeSource Self}, Path=(SpellCheck.IsEnabled)}" />
        <Setter Property="wpf:TextFieldAssist.CharacterCounterStyle" Value="{StaticResource MaterialDesignCharacterCounterTextBlock}" />
        <Setter Property="wpf:TextFieldAssist.CharacterCounterVisibility" Value="Visible" />
        <Setter Property="wpf:HintAssist.HelperTextStyle" Value="{StaticResource MaterialDesignHelperTextBlock}" />

        --><!--Virtualization--><!--
        <Setter Property="ItemsPanel">
            <Setter.Value>
                <ItemsPanelTemplate>
                    <VirtualizingStackPanel />
                </ItemsPanelTemplate>
            </Setter.Value>
        </Setter>

        <Setter Property="Template">
            <Setter.Value>

                <ControlTemplate TargetType="{x:Type local:iComboBox}">

                    <Grid>

                        <Border
                            HorizontalAlignment="Stretch"
                            VerticalAlignment="Stretch"
                            Background="{TemplateBinding Background}"
                            CornerRadius="4,4,4,4"
                            RenderTransformOrigin="0.5,0.5"
                            Visibility="{TemplateBinding wpf:TextFieldAssist.RippleOnFocusEnabled,
                                                         Converter={StaticResource BooleanToVisibilityConverter}}">
                            <Border.RenderTransform>
                                <ScaleTransform x:Name="RippleOnFocusScaleTransform" ScaleX="0" ScaleY="0" />
                            </Border.RenderTransform>

                        </Border>

                        <AdornerDecorator>

                            <Border
                                x:Name="border"
                                Padding="{TemplateBinding Padding}"
                                Background="{TemplateBinding Background}"
                                BorderBrush="{TemplateBinding BorderBrush}"
                                BorderThickness="{TemplateBinding BorderThickness}"
                                CornerRadius="4,4,4,4"
                                SnapsToDevicePixels="True">

                                <Grid HorizontalAlignment="{TemplateBinding HorizontalContentAlignment}" VerticalAlignment="{TemplateBinding VerticalContentAlignment}">
                                    <Grid.ColumnDefinitions>
                                        <ColumnDefinition Width="Auto" />
                                        <ColumnDefinition />
                                        <ColumnDefinition Width="Auto" />
                                    </Grid.ColumnDefinitions>
                                    <wpf:PackIcon
                                        x:Name="LeadingPackIcon"
                                        Grid.Column="0"
                                        Width="{TemplateBinding wpf:TextFieldAssist.LeadingIconSize}"
                                        Height="{TemplateBinding wpf:TextFieldAssist.LeadingIconSize}"
                                        Margin="0,0,6,0"
                                        VerticalAlignment="Center"
                                        Kind="{TemplateBinding wpf:TextFieldAssist.LeadingIcon}"
                                        Opacity="{TemplateBinding wpf:HintAssist.HintOpacity}"
                                        Visibility="{TemplateBinding wpf:TextFieldAssist.HasLeadingIcon,
                                                                     Converter={StaticResource BooleanToVisibilityConverter}}" />

                                    <Grid
                                        x:Name="grid"
                                        Grid.Column="1"
                                        MinWidth="1">
                                        <Grid Grid.Column="0">
                                            <Grid.ColumnDefinitions>
                                                <ColumnDefinition Width="Auto" />
                                                <ColumnDefinition Width="*" />
                                                <ColumnDefinition Width="Auto" />
                                            </Grid.ColumnDefinitions>

                                            <ScrollViewer
                                                x:Name="PART_ContentHost"
                                                Grid.Column="1"
                                                VerticalAlignment="{TemplateBinding VerticalContentAlignment}"
                                                Panel.ZIndex="1"
                                                wpf:ScrollViewerAssist.IgnorePadding="True"
                                                Cursor="IBeam"
                                                Focusable="false"
                                                HorizontalScrollBarVisibility="Hidden"
                                                SnapsToDevicePixels="{TemplateBinding SnapsToDevicePixels}"
                                                UseLayoutRounding="{TemplateBinding UseLayoutRounding}"
                                                VerticalScrollBarVisibility="Hidden" />

                                        </Grid>


                                    </Grid>


                                </Grid>
                            </Border>
                        </AdornerDecorator>


                        <VisualStateManager.VisualStateGroups>
                            <VisualStateGroup x:Name="FocusStates">
                                <VisualState x:Name="Focused">
                                    <Storyboard TargetName="RippleOnFocusScaleTransform">
                                        <DoubleAnimation
                                            Storyboard.TargetProperty="ScaleX"
                                            From="0"
                                            To="1"
                                            Duration="0:0:0.3">
                                            <DoubleAnimation.EasingFunction>
                                                <SineEase EasingMode="EaseOut" />
                                            </DoubleAnimation.EasingFunction>
                                        </DoubleAnimation>
                                        <DoubleAnimation
                                            Storyboard.TargetProperty="ScaleY"
                                            From="0"
                                            To="1"
                                            Duration="0:0:0.3">
                                            <DoubleAnimation.EasingFunction>
                                                <SineEase EasingMode="EaseOut" />
                                            </DoubleAnimation.EasingFunction>
                                        </DoubleAnimation>
                                        <DoubleAnimation
                                            BeginTime="0:0:0.45"
                                            Storyboard.TargetProperty="ScaleX"
                                            To="0"
                                            Duration="0" />
                                        <DoubleAnimation
                                            BeginTime="0:0:0.45"
                                            Storyboard.TargetProperty="ScaleY"
                                            To="0"
                                            Duration="0" />
                                    </Storyboard>
                                </VisualState>
                                <VisualState x:Name="Unfocused">
                                    <Storyboard TargetName="RippleOnFocusScaleTransform">
                                        <DoubleAnimation
                                            Storyboard.TargetProperty="ScaleX"
                                            To="0"
                                            Duration="0" />
                                        <DoubleAnimation
                                            Storyboard.TargetProperty="ScaleY"
                                            To="0"
                                            Duration="0" />
                                    </Storyboard>
                                </VisualState>
                            </VisualStateGroup>
                        </VisualStateManager.VisualStateGroups>
                    </Grid>
                    <ControlTemplate.Triggers>


                        --><!--  IsEnabled  --><!--
                        <MultiTrigger>
                            <MultiTrigger.Conditions>
                                <Condition Property="IsEnabled" Value="False" />
                            </MultiTrigger.Conditions>
                            --><!--<Setter TargetName="border" Property="BorderBrush" Value="#FF666666" />--><!--
                            <Setter Property="Background" Value="#FFD6D6D6"/>
                        </MultiTrigger>


                        --><!--  IsReadOnly  --><!--
                        <MultiTrigger>
                            <MultiTrigger.Conditions>
                                <Condition Property="IsReadOnly" Value="True" />
                            </MultiTrigger.Conditions>
                            --><!--<Setter TargetName="border" Property="BorderBrush" Value="#FF666666" />--><!--
                            <Setter Property="Background" Value="#FFD6D6D6"/>
                        </MultiTrigger>


                        --><!--  IsKeyboardFocused  --><!--
                        <Trigger Property="IsKeyboardFocused" Value="True">
                            --><!--<Setter TargetName="Underline" Property="IsActive" Value="True" />--><!--
                        </Trigger>
                        <MultiTrigger>
                            <MultiTrigger.Conditions>
                                <Condition Property="IsKeyboardFocused" Value="True" />
                                --><!--<Condition Property="wpf:TextFieldAssist.HasOutlinedTextField" Value="True" />--><!--
                            </MultiTrigger.Conditions>
                            <Setter TargetName="border" Property="Margin" Value="-1" />
                            <Setter Property="BorderThickness" Value="2" />
                            <Setter Property="BorderBrush" Value="{Binding Path=(wpf:TextFieldAssist.UnderlineBrush), RelativeSource={RelativeSource Self}}" />
                        </MultiTrigger>

                        --><!--  IsMouseOver  --><!--
                        <MultiTrigger>
                            <MultiTrigger.Conditions>
                                <Condition Property="IsMouseOver" Value="True" />
                                <Condition Property="wpf:TextFieldAssist.NewSpecHighlightingEnabled" Value="False" />
                            </MultiTrigger.Conditions>
                            <Setter Property="BorderBrush" Value="{Binding Path=(wpf:TextFieldAssist.UnderlineBrush), RelativeSource={RelativeSource Self}}" />
                            <Setter TargetName="border" Property="Margin" Value="-1" />
                            <Setter Property="BorderThickness" Value="2" />
                        </MultiTrigger>


                        --><!--  Validation.HasError  --><!--
                        <Trigger Property="Validation.HasError" Value="true">
                            <Setter Property="BorderBrush" Value="{DynamicResource MaterialDesignValidationErrorBrush}" />
                            <Setter TargetName="border" Property="Margin" Value="-1" />
                            <Setter Property="BorderThickness" Value="2" />
                            <Setter Property="BorderBrush" Value="{DynamicResource MaterialDesignValidationErrorBrush}" />
                        </Trigger>
                        --><!--<MultiTrigger>
                            <MultiTrigger.Conditions>
                                <Condition Property="Validation.HasError" Value="True" />
                                <Condition Property="wpf:TextFieldAssist.HasOutlinedTextField" Value="True" />
                            </MultiTrigger.Conditions>
                            <Setter TargetName="border" Property="Margin" Value="-1" />
                            <Setter Property="BorderThickness" Value="2" />
                            <Setter Property="BorderBrush" Value="{DynamicResource MaterialDesignValidationErrorBrush}" />
                            -->
                        <!--<Setter TargetName="FooterGrid" Property="Margin" Value="0,0,1,0" />-->
                        <!--
                        </MultiTrigger>--><!--

                    </ControlTemplate.Triggers>
                </ControlTemplate>
            </Setter.Value>
        </Setter>
    </Style>-->



</ResourceDictionary>